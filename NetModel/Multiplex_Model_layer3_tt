function Multiplex_Model_layer3_tt(N0,p,m1,m2,m3,k1,L1,M1,k2,L2,M2,k3,L3,M3,k4,L4,M4,simu,tt)
% 程序功能：三层网络模型
% 示例： Multiplex_Model_layer3_tt(10,0.4,3,4,5,4,6,8,5,8,12,6,8,10,8,10,12,50,1)
t = 100:50:100;
Cor_Pro =zeros(5,length(t));
MR = cell(1,simu);
for i = 1:length(t)      %时间
    for ins = 1:simu       %实例数
      fprintf('%d_%d\n', t(i), ins)
        MR{1,ins} = Multiplex_Model_layer3_fp(N0,t(i),p,m1,m2,m3);  %实例  
    end
    [Sum1,Sum2,Sum3,Sum4] = Deg_Cor(MR,k1,L1,M1,k2,L2,M2,k3,L3,M3,k4,L4,M4);
   Cor_Pro(1,i) = t(i);   
   Cor_Pro(2,i) = Sum1/simu;
   Cor_Pro(3,i) = Sum2/simu;
   Cor_Pro(4,i) = Sum3/simu;
   Cor_Pro(5,i) = Sum4/simu;
   strFileName = sprintf('MR_layer3_%d_%d_%0.2f_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d.mat',...
      N0,t(i),p,m1,m2,m3,k1,L1,M1,k2,L2,M2,k3,L3,M3,k4,L4,M4,simu,tt);
   save(strFileName,'MR')
end
  strFileName = sprintf('Corpro_layer3_%d_%0.2f_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d_%d.mat',...
     N0,p,m1,m2,m3,k1,L1,M1,k2,L2,M2,k3,L3,M3,k4,L4,M4,simu,tt);
  save(strFileName,'Cor_Pro')

end

function R = Multiplex_Model_layer3_fp(N0,t,p,m1,m2,m3)

% 产生三层初始网络:完全图
    A = ones(N0,N0,3);
    R{1,1}=A(:,:,1)-diag(diag(A(:,:,1)));
    R{1,2}=A(:,:,2)-diag(diag(A(:,:,2)));
    R{1,3}=A(:,:,3)-diag(diag(A(:,:,3)));
    
% 网络增长
    T = N0;
    while T <= t
        s=[sum(R{1,1},1);sum(R{1,2},1);sum(R{1,3},1)];   %计算两层网络中每个节点的度；
        f=s';                              %连接函数            
        bsize = size(f,1);  
        
 %以概率p走顶点步
        if rand(1,1) < p                         %产生随机数，即选择概率；并据此走顶点步；  
         deg = sortrows([(1:bsize)',f]);
          r1 = randsample(deg(:,1),m1,'true',deg(:,2)/max(deg(:,2))); 
          Ur1 = unique(r1);
          while m1~=length(Ur1)
               r1 = randsample(deg(:,1),m1,'true',deg(:,2)/max(deg(:,2))); 
               Ur1 = unique(r1);
          end  
          
          r2 = randsample(deg(:,1),m2,'true',deg(:,3)/max(deg(:,3))); 
          Ur2 = unique(r2);
          while m2~=length(Ur2)
               r2 = randsample(deg(:,1),m2,'true',deg(:,3)/max(deg(:,3))); 
               Ur2 = unique(r2);
          end  
          
           r3 = randsample(deg(:,1),m3,'true',deg(:,4)/max(deg(:,4))); 
          Ur3 = unique(r3);
          while m3~=length(Ur3)
               r3 = randsample(deg(:,1),m3,'true',deg(:,4)/max(deg(:,4))); 
               Ur3 = unique(r3);
          end
%           r1 = randsample(deg(:,1),m1,'true',deg(:,2)/max(deg(:,2)));
%           r2 = randsample(deg(:,1),m2,'true',deg(:,3)/max(deg(:,3)));
          R{1,1}(bsize+1,bsize+1) = 0;
          R{1,2}(bsize+1,bsize+1) = 0;
          R{1,3}(bsize+1,bsize+1) = 0; 
          r1size = size(r1,1);
          r2size = size(r2,1);
          r3size = size(r3,1);
          for node=1:r1size
            R{1,1}(bsize+1,r1(node)) = 1;
            R{1,1}(r1(node),bsize+1) = 1;
          end 
          for node=1:r2size
            R{1,2}(bsize+1,r2(node)) = 1;
            R{1,2}(r2(node),bsize+1) = 1;
          end 
          for node=1:r3size
            R{1,3}(bsize+1,r3(node)) = 1;
            R{1,3}(r3(node),bsize+1) = 1;
          end 
%以1-p的概率走边步
        else       
            deg = sortrows([(1:bsize)',f]); 
   
              r1 = randsample(deg(:,1),2,'true',deg(:,2)/max(deg(:,2)));
              Ur1 = unique(r1);
            while length(Ur1)~=2       %选择不同的节点对；
               r1 = randsample(deg(:,1),2,'true',deg(:,2)/max(deg(:,2))); 
               Ur1 = unique(r1);
            end     
              r2 = randsample(deg(:,1),2,'true',deg(:,3)/max(deg(:,3)));
              Ur2 = unique(r2);
            while length(Ur2)~=2       %选择不同的节点对；
               r2 = randsample(deg(:,1),2,'true',deg(:,3)/max(deg(:,3))); 
               Ur2 = unique(r2);
            end      
              r3 = randsample(deg(:,1),2,'true',deg(:,4)/max(deg(:,4)));
              Ur3 = unique(r3);
            while length(Ur3)~=2       %选择不同的节点对；
               r3 = randsample(deg(:,1),2,'true',deg(:,4)/max(deg(:,4))); 
               Ur3 = unique(r3);
            end  
               R{1,1}(r1(1),r1(2)) = 1;     %把m个节点添加到新的网络中 
               R{1,1}(r1(2),r1(1)) = 1; 
               R{1,2}(r2(1),r2(2)) = 1;     %把m个节点添加到新的网络中 
               R{1,2}(r2(2),r2(1)) = 1;
               R{1,3}(r3(1),r3(2)) = 1;     %把m个节点添加到新的网络中 
               R{1,3}(r3(2),r3(1)) = 1;
               
             r1m = [];  
             r2m = [];  
             r3m = [];             
          for i = 2:m1    
              r1m = [r1m, r1];
              r1 = randsample(deg(:,1),2,'true',deg(:,2)/max(deg(:,2)));           
              aa = r1m(1,end)==r1(1) &  r1m(2,end)==r1(2);
              Ur1 = unique(r1);           
            while length(Ur1)~=2 || sum(aa)==1      %选择不同的节点对；
               r1 = randsample(deg(:,1),2,'true',deg(:,2)/max(deg(:,2)));
               Ur1 = unique(r1);
               aa = r1m(1,end)==r1(1) &  r1m(2,end)==r1(2);
            end
              R{1,1}(r1(1),r1(2)) = 1;     %把m个节点添加到新的网络中 
              R{1,1}(r1(2),r1(1)) = 1;    
          end  
          
          for j = 2:m2 
              r2m = [r2m, r2];
              r2 = randsample(deg(:,1),2,'true',deg(:,3)/max(deg(:,3)));           
              bb = r2m(1,end)==r2(1) &  r2m(2,end)==r2(2);
              Ur2 = unique(r2);           
            while length(Ur2)~=2 || sum(bb)==1      %选择不同的节点对；
               r2 = randsample(deg(:,1),2,'true',deg(:,3)/max(deg(:,3)));
               Ur2 = unique(r2);
               bb = r2m(1,end)==r2(1) &  r2m(2,end)==r2(2);
            end
              R{1,2}(r2(1),r2(2)) = 1;     %把m个节点添加到新的网络中 
              R{1,2}(r2(2),r2(1)) = 1;   
          end  
          
           for r = 2:m3 
              r3m = [r3m, r3];
              r3 = randsample(deg(:,1),2,'true',deg(:,4)/max(deg(:,4)));           
              cc = r3m(1,end)==r3(1) &  r3m(2,end)==r3(2);
              Ur3 = unique(r3);           
            while length(Ur3)~=2 || sum(cc)==1      %选择不同的节点对；
               r3 = randsample(deg(:,1),2,'true',deg(:,3)/max(deg(:,3)));
               Ur3 = unique(r3);
               cc = r3m(1,end)==r3(1) &  r3m(2,end)==r3(2);
            end
              R{1,3}(r3(1),r3(2)) = 1;     %把m个节点添加到新的网络中 
              R{1,3}(r3(2),r3(1)) = 1;   
          end   
        end
    T=T+1;
    end
%     strFileName = sprintf('Multiplex_Model_%d_%d_%0.2f_%d_%d_%d_%d.mat',...
%       N0,t,p,m1,m2,ins,tt);
%    save(strFileName,'R')
end

function  [Sum1,Sum2,Sum3,Sum4] = Deg_Cor(MR,k1,L1,M1,k2,L2,M2,k3,L3,M3,k4,L4,M4)

  INS_Num = size(MR,2);   %每一次的仿真实例数
  Sum1 = 0;
  Sum2 = 0;
  Sum3 = 0;
  Sum4 = 0;
  for j=1:INS_Num
     MR1 = MR{1,j};
     Deg_Pro = Multiplex_3Model_CorreDegree(MR1);
     a1 = Deg_Pro(:,1) == k1 & Deg_Pro(:,2) == L1 & Deg_Pro(:,3) == M1;
     a2 = Deg_Pro(:,1) == k2 & Deg_Pro(:,2) == L2 & Deg_Pro(:,3) == M2;
     a3 = Deg_Pro(:,1) == k3 & Deg_Pro(:,2) == L3 & Deg_Pro(:,3) == M3;
     a4 = Deg_Pro(:,1) == k4 & Deg_Pro(:,2) == L4 & Deg_Pro(:,3) == M4;
     Row_ID1 = find(a1==1);
     Row_ID2 = find(a2==1);
     Row_ID3 = find(a3==1);
     Row_ID4 = find(a4==1);
     if ~isempty(Row_ID1)
        Sum1 = Sum1+Deg_Pro(Row_ID1,5);
     end
     if ~isempty(Row_ID2)
        Sum2 = Sum2+Deg_Pro(Row_ID2,5);
     end
     if ~isempty(Row_ID3)
        Sum3 = Sum3+Deg_Pro(Row_ID3,5);
     end
     if ~isempty(Row_ID4)
        Sum4 = Sum4+Deg_Pro(Row_ID4,5);
     end
  end
end

function Deg_Pro = Multiplex_3Model_CorreDegree(MR1)
% load Multiplex_3Model.mat R
% MR1 = R;
% Deg = [sum(MR{1,1});sum(MR{1,2})];  %第一层、第二层网络的节点度
Deg = [sum(MR1{1,1});sum(MR1{1,2});sum(MR1{1,3})]; %第一层、第二层、第三层网络的节点度
Deg_Corr = [];
 U_D1 = unique(Deg(1,:));   %
  for i = 1:length(U_D1)
      V1_Num = find(Deg(1,:)==U_D1(i));    %第一层网络的节点度    
      U_D2 =  unique(Deg(2,V1_Num));
      for j=1:length(U_D2)  
         aa = Deg(2,V1_Num)==U_D2(j);
         DD = Deg(3,V1_Num(aa));
         Sta_Num = tabulate(DD);
         UN_VerNum = unique(DD);
         Uniq_V3Num = zeros(4,length(UN_VerNum));
         Uniq_V3Num(1,:) = U_D1(i);
         Uniq_V3Num(2,:) = U_D2(j);
         bb = Sta_Num(:,2)>0;
         Uniq_V3Num(3:4,:) = Sta_Num(bb,1:2)';
         Deg_Corr = [Deg_Corr,Uniq_V3Num];
      end
  end
  Pro = Deg_Corr(4,:)./sum(Deg_Corr(4,:));
  Deg_Pro = [Deg_Corr; Pro]';
% save('Multiplex_3Model_CorreDegree.mat','Deg_Pro')
end

